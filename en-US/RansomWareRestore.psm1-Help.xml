<?xml version="1.0" encoding="utf-8" ?>
<helpItems xmlns="http://msh" schema="maml">
	<!--Edited with: SAPIEN PowerShell HelpWriter 2016 v1.1.20-->
	<!--Generated by: SAPIEN PowerShell HelpWriter 2016 v1.1.19-->
	<!--
		Module: 		VCPIRansomWareRestore
		Version:		0.0
	-->
	<!--All Commands-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Connect-Netapp</command:name>
			<maml:description>
				<maml:para>
				</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Connect</command:verb>
			<command:noun>Netapp</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>
			</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Connect-Netapp</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>netAppController</maml:name>
					<maml:description>
						<maml:para>The name of the netapp controller to connect to</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>vServer</maml:name>
					<maml:description>
						<maml:para>The name of the vserver to connect to.  Usually the format of this is svm_XXXXXXfs01</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>credential</maml:name>
					<maml:description>
						<maml:para>A credential object that can be passed to the script.  The format of the username is DOMAIN\Username with the domain in ALL UPPERCASE.  If the domain is not in all uppercase the login will fail.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
			<command:syntaxItem>
				<maml:name>Connect-Netapp</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>netAppController</maml:name>
					<maml:description>
						<maml:para>The name of the netapp controller to connect to</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>vServer</maml:name>
					<maml:description>
						<maml:para>The name of the vserver to connect to.  Usually the format of this is svm_XXXXXXfs01</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Username</maml:name>
					<maml:description>
						<maml:para>The username of a user that has access to netapp that can be passed to the script.  The format of the username is DOMAIN\Username with the domain in ALL UPPERCASE.  If the domain is not in all uppercase the login will fail.  The script will prompt for the password through a secure form if this option is choosen.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>netAppController</maml:name>
				<maml:description>
					<maml:para>The name of the netapp controller to connect to</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>vServer</maml:name>
				<maml:description>
					<maml:para>The name of the vserver to connect to.  Usually the format of this is svm_XXXXXXfs01</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>A credential object that can be passed to the script.  The format of the username is DOMAIN\Username with the domain in ALL UPPERCASE.  If the domain is not in all uppercase the login will fail.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
				<dev:type>
					<maml:name>PSCredential</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Username</maml:name>
				<maml:description>
					<maml:para>The username of a user that has access to netapp that can be passed to the script.  The format of the username is DOMAIN\Username with the domain in ALL UPPERCASE.  If the domain is not in all uppercase the login will fail.  The script will prompt for the password through a secure form if this option is choosen.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
		</command:examples>
		<maml:relatedLinks>
			<!--Links-->
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-EncryptedFiles</command:name>
			<maml:description>
				<maml:para>Generates a list of encrypted files on the file system.  </maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>EncryptedFiles</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This script relies on the command get-vcpirandomewarefamily to determine how to search for encrypted files on the network share.  This script will, based on this information, be able to identify and output to the screen or to a variable a list of objects that have been encrypted.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-EncryptedFiles</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
					<maml:name>RansomWareFamily</maml:name>
					<maml:description>
						<maml:para>An object identifying the family of RansomWare that has encrypted the network file share</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="">
					<maml:name>searchPath</maml:name>
					<maml:description>
						<maml:para>The path to search for encrypted files</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
				<maml:name>RansomWareFamily</maml:name>
				<maml:description>
					<maml:para>An object identifying the family of RansomWare that has encrypted the network file share</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="">
				<maml:name>searchPath</maml:name>
				<maml:description>
					<maml:para>The path to search for encrypted files</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.Object
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>get-EncryptedFiles -RansomWareFamily (get-RansomWareFamily -firstFilePath &quot;c:\testtxt.txt&quot; -secondFilePath &quot;c:\testdoc.doc&quot;) -searchPath &quot;C:\folder&quot;</dev:code>
				<dev:remarks>
					<maml:para>The parameter RansomWareFamily is expecting the output object from get-RansomWareFamily.  This can either be stored in a variable or called at runtime.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>get-RansomWareFamily -firstFilePath &quot;c:\testtxt.txt&quot; -secondFilePath &quot;c:\testdoc.doc&quot; | get-EncryptedFiles -searchPath &quot;c:\folder&quot;</dev:code>
				<dev:remarks>
					<maml:para>The parameter RansomWareFamily is expecting the output object from get-RansomWareFamily.  This can either be stored in a variable or called at runtime.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$family = get-RansomWareFamily -firstFilePath = &quot;c:\testtxt.txt&quot; -secondFilePath = &quot;c:\testdoc.doc&quot;

get-EncryptedFiles -RansomWareFamily $family -searchPath &quot;c:\folder&quot;</dev:code>
				<dev:remarks>
					<maml:para>The parameter RansomWareFamily is expecting the output object from get-RansomWareFamily.  This can either be stored in a variable or called at runtime.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-RansomwareFamily</command:name>
			<maml:description>
				<maml:para>Determines the type of RansomWare depending on the input of two files</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>RansomwareFamily</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>
			</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-RansomwareFamily</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="">
					<maml:name>FirstFilePath</maml:name>
					<maml:description>
						<maml:para>The first file to analyze</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="">
					<maml:name>SecondFilePath</maml:name>
					<maml:description>
						<maml:para>The second file to analyze</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="">
				<maml:name>FirstFilePath</maml:name>
				<maml:description>
					<maml:para>The first file to analyze</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="">
				<maml:name>SecondFilePath</maml:name>
				<maml:description>
					<maml:para>The second file to analyze</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>get-EncryptedFiles -RansomWareFamily (get-RansomWareFamily -firstFilePath &quot;c:\testtxt.txt&quot; -secondFilePath &quot;c:\testdoc.doc&quot;) -searchPath &quot;C:\folder&quot;</dev:code>
				<dev:remarks>
					<maml:para>
					</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>get-RansomWareFamily -firstFilePath &quot;c:\testtxt.txt&quot; -secondFilePath &quot;c:\testdoc.doc&quot; | get-EncryptedFiles -searchPath &quot;c:\folder&quot;</dev:code>
				<dev:remarks>
					<maml:para>
					</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$family = get-RansomWareFamily -firstFilePath = &quot;c:\testtxt.txt&quot; -secondFilePath = &quot;c:\testdoc.doc&quot;

get-EncryptedFiles -RansomWareFamily $family -searchPath &quot;c:\folder&quot;</dev:code>
				<dev:remarks>
					<maml:para>
					</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-SnapshotList</command:name>
			<maml:description>
				<maml:para>
				</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>SnapshotList</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>
			</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-SnapshotList</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
					<maml:name>restoreDate</maml:name>
					<maml:description>
						<maml:para/>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0">
				<maml:name>restoreDate</maml:name>
				<maml:description>
					<maml:para/>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Remove-EncryptedFiles</command:name>
			<maml:description>
				<maml:para>Removes a list of encrypted files from the file share</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Remove</command:verb>
			<command:noun>EncryptedFiles</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>
			</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Remove-EncryptedFiles</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="">
					<maml:name>removeList</maml:name>
					<maml:description>
						<maml:para>A list of files to remove.  This list is an object which should be provided by Get-VCPIEncryptedFiles or Get-VCPICleanupFiles</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="">
				<maml:name>removeList</maml:name>
				<maml:description>
					<maml:para>A list of files to remove.  This list is an object which should be provided by Get-VCPIEncryptedFiles or Get-VCPICleanupFiles</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>None
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Remove-EncryptedFiles -removelist $list</dev:code>
				<dev:remarks>
					<maml:para>Use a list of files from Get-Cleanupfiles command to remove from the file server.  You can also use a list from Get-EncryptedFiles instead.  This is basically a cleanup function.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Remove-EncryptedFiles -removelist $list</dev:code>
				<dev:remarks>
					<maml:para>
					</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Restore-EncryptedFiles</command:name>
			<maml:description>
				<maml:para>
				</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Restore</command:verb>
			<command:noun>EncryptedFiles</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This function works with other commands to restore files on the netapp file system from snapshots.  The command lists all of the available snapshots and then works on restoring the files.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Restore-EncryptedFiles</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="">
					<maml:name>restoreList</maml:name>
					<maml:description>
						<maml:para>A list of files to restore.  This list is an object which should be provided by Get-VCPIEncryptedFiles</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>netappFileServer</maml:name>
					<maml:description>
						<maml:para>The netapp file server to connect to.  This is usually in the format of svm_XXXXXfs01.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>netappController</maml:name>
					<maml:description>
						<maml:para>The name of the netapp controller to connect to</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>netAppCredential</maml:name>
					<maml:description>
						<maml:para>A credential object that can be passed to the script.  The format of the username is DOMAIN\Username with the domain in ALL UPPERCASE.  If the domain is not in all uppercase the login will fail.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>restoreBase</maml:name>
					<maml:description>
						<maml:para>The path of the netapp volume.  Usually this is in the format of /svm_XXXXXfs01_data</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>incidentNumber</maml:name>
					<maml:description>
						<maml:para>The Incident/Task number from Service now</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>restoreDate</maml:name>
					<maml:description>
						<maml:para>The date to restore the files to.  This is in the format of M/D/YYYY
Examples:
3/31/2016
3/1/2016
12/1/2016</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>fileSystemBase</maml:name>
					<maml:description>
						<maml:para>The base of the file string in the file path to replace with the temporary share path. This is usually in the format of: \\XXXXXFS01\c$\svm_XXXXXFS01_data</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Overwrite</maml:name>
					<maml:description>
						<maml:para>If this flag is selected the files will be deleted first in the original location and then copied over.  This is due to working with file paths longer than 256 characters</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
			<command:syntaxItem>
				<maml:name>Restore-EncryptedFiles</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="">
					<maml:name>restoreList</maml:name>
					<maml:description>
						<maml:para>A list of files to restore.  This list is an object which should be provided by Get-VCPIEncryptedFiles</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>netappFileServer</maml:name>
					<maml:description>
						<maml:para>The netapp file server to connect to.  This is usually in the format of svm_XXXXXfs01.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>netappController</maml:name>
					<maml:description>
						<maml:para>The name of the netapp controller to connect to</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>netappUserName</maml:name>
					<maml:description>
						<maml:para>The username of a user that has access to netapp that can be passed to the script.  The format of the username is DOMAIN\Username with the domain in ALL UPPERCASE.  If the domain is not in all uppercase the login will fail.  The script will prompt for the password through a secure form if this option is choosen.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>restoreBase</maml:name>
					<maml:description>
						<maml:para>The path of the netapp volume.  Usually this is in the format of /svm_XXXXXfs01_data</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>incidentNumber</maml:name>
					<maml:description>
						<maml:para>The Incident/Task number from Service now</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>restoreDate</maml:name>
					<maml:description>
						<maml:para>The date to restore the files to.  This is in the format of M/D/YYYY
Examples:
3/31/2016
3/1/2016
12/1/2016</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>fileSystemBase</maml:name>
					<maml:description>
						<maml:para>The base of the file string in the file path to replace with the temporary share path. This is usually in the format of: \\XXXXXFS01\c$\svm_XXXXXFS01_data</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Overwrite</maml:name>
					<maml:description>
						<maml:para>If this flag is selected the files will be deleted first in the original location and then copied over.  This is due to working with file paths longer than 256 characters</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="">
				<maml:name>restoreList</maml:name>
				<maml:description>
					<maml:para>A list of files to restore.  This list is an object which should be provided by Get-VCPIEncryptedFiles</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>netappFileServer</maml:name>
				<maml:description>
					<maml:para>The netapp file server to connect to.  This is usually in the format of svm_XXXXXfs01.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>netappController</maml:name>
				<maml:description>
					<maml:para>The name of the netapp controller to connect to</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>netAppCredential</maml:name>
				<maml:description>
					<maml:para>A credential object that can be passed to the script.  The format of the username is DOMAIN\Username with the domain in ALL UPPERCASE.  If the domain is not in all uppercase the login will fail.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
				<dev:type>
					<maml:name>PSCredential</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>restoreBase</maml:name>
				<maml:description>
					<maml:para>The path of the netapp volume.  Usually this is in the format of /svm_XXXXXfs01_data</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>incidentNumber</maml:name>
				<maml:description>
					<maml:para>The Incident/Task number from Service now</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>restoreDate</maml:name>
				<maml:description>
					<maml:para>The date to restore the files to.  This is in the format of M/D/YYYY
Examples:
3/31/2016
3/1/2016
12/1/2016</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>fileSystemBase</maml:name>
				<maml:description>
					<maml:para>The base of the file string in the file path to replace with the temporary share path. This is usually in the format of: \\XXXXXFS01\c$\svm_XXXXXFS01_data</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Overwrite</maml:name>
				<maml:description>
					<maml:para>If this flag is selected the files will be deleted first in the original location and then copied over.  This is due to working with file paths longer than 256 characters</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>netappUserName</maml:name>
				<maml:description>
					<maml:para>The username of a user that has access to netapp that can be passed to the script.  The format of the username is DOMAIN\Username with the domain in ALL UPPERCASE.  If the domain is not in all uppercase the login will fail.  The script will prompt for the password through a secure form if this option is choosen.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>ransomwareFamily</maml:name>
				<maml:description>
					<maml:para>An object identifying the family of RansomWare that has encrypted the network file share, this object is from the Get-VCPIRansomwareFamily command</maml:para>
				</maml:description>
				<command:parameterValue required="false"/>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.Object
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Restore-EncryptedFiles -restoreList $list -netappFileServer svm_XXXXXXfs01 -netappController netapp01 -netAppCredential $credential -restoreBase /svm_XXXXXXfs01_data -incidentNumber INCTEST12 -restoreDate 3/27/2016 -fileSystemBase \\XXXXXXfs01\c$\svm_XXXXXXfs01_data -Overwrite -ransomwareFamily $encryptedFamily</dev:code>
				<dev:remarks>
					<maml:para>Using the netappCredential parameter, you pass a credential object to the command.  This can easy be created by using the following command:
$credential = get-credential</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Restore-EncryptedFiles -restoreList $list -netappFileServer svm_XXXXXXfs01 -netappController netapp01 -netAppCredential $credential -restoreBase /svm_XXXXXXfs01_data -incidentNumber INCTEST12 -restoreDate 3/27/2016 -fileSystemBase \\XXXXXXfs01\c$\svm_XXXXXXfs01_data -Overwrite -ransomwareFamily (get-RansomwareFamily -firstfile path c:\admin\test.txt -secondfilepath c:\admin\test2.txt)</dev:code>
				<dev:remarks>
					<maml:para>Using the netappCredential parameter, you pass a credential object to the command.  This can easy be created by using the following command:
$credential = get-credential</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Restore-EncryptedFiles -restoreList $list -netappFileServer svm_XXXXXXfs01 -netappController netapp01 -netAppUsername DOMAIN\Username -restoreBase /svm_XXXXXXfs01_data -incidentNumber INCTEST12 -restoreDate 3/27/2016 -fileSystemBase \\XXXXXXfs01\c$\svm_XXXXXXfs01_data -Overwrite -ransomwareFamily (get-RansomwareFamily -firstfile path c:\admin\test.txt -secondfilepath c:\admin\test2.txt)</dev:code>
				<dev:remarks>
					<maml:para>Using the NetAppUsername parameter and filling in the username, you are prompted for your password</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<!--Generated by: SAPIEN PowerShell HelpWriter 2016 v1.1.19-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-CleanupFiles</command:name>
			<maml:description>
				<maml:para>Gets a list of files left over by the ransomware that are not encrypted</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>CleanupFiles</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This command retrieves a list of files left by the ransomware which are not encrypted.  These filese are usually the ransomware notification messages and are trypically .html, .txt and an image file (.png, .jpeg, etc)</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>Use the filter to filter the files on the file system by a unique value.  Typically this will be a specific name of the ransomeware notes that is in three different formats.  DO NOT USE WILDCARDS.</maml:para>
				</maml:description>
				<command:parameterValue required="true">String</command:parameterValue>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>searchPath</maml:name>
				<maml:description>
					<maml:para>The root path to search for the files to cleanup.</maml:para>
				</maml:description>
				<command:parameterValue required="true">String</command:parameterValue>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-CleanupFiles -filter &quot;HelpDecrypt_&quot; -searchPath &quot;c:\&quot;</dev:code>
				<dev:remarks>
					<maml:para>
					</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<!--Edited with: SAPIEN PowerShell HelpWriter 2016 v1.1.20-->
</helpItems>